CSCE 350
Trevor Hutto & Jared Piedt
01 December 2014


INTRODUCTION TO THE PROBLEM --
This project is meant to simulate the recognition human facial expressions. A facial expression can be regonized using vectors and comparing them to the template data, we find the top ten closest matches in the template data to determine which images are making certain facial expressions. So the top ten images from the AU01 are most likely surprised faces, the top ten from AU12 are happy faces, and AU17's top ten are more than likely sad faces.

The problem is making a solution that is time effecient. Since every element in a vector has to be compared to another vector to determine it's match, we have N^2 time. Of course there is also a large startup cost for opening and closing so many files.

THE METHODOLOGY and IMPROVING TIME --
Improving time is a difficult task considering that there must be n^2 comparisons in order to get the right answer. In our solution, we start by loading the template file, after the template file has been loaded, we load the first query file, compare it to the template, and print the top ten matches. The comparisons are done in our Compare class, and the files are opened and closed in our Main class. We repeat this process until all of the files have been examined and their results printed.

We have a number of tricks to decrease the execution time. The first being applied at compile time. We use the 0Fast optimizaiton flag in order to ensure that our program can run as fast as possible. Other than optimization, our speed up techniques include the stable_sort, and minimizing output. The stable sort is among the fastest sorting algorithms in C++. We use it to sort the list of pairs as they come out of comparison functions. Once the pairs of 'rows' and 'similarity' are sorted, we take the last ten pairs in the vector to display the top ten.

Output is another crucial piece of our program. We did our best to have the least amount of output as possible. Output is expensive and slows the CPU down considerably. By minizing the results printed to the console, we were able to speed up our programs CPU time considerably.

PSUEDO CODE --

EXPERIMENTAL RESULTS --

CONCLUSION --
